<?xml version="1.0" encoding="ISO-8859-1"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
           http://www.springframework.org/schema/jdbc 
           http://www.springframework.org/schema/jdbc/spring-jdbc-4.1.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

	<aop:aspectj-autoproxy/>
	
	<bean id="jpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
		<description>
			Fem servir Hibernate com a motor de persistència per sota de JPA.
		</description>
		<property name="showSql" value="${persistence.showSQL:true}" />
		<property name="generateDdl" value="${persistence.generateDdl:false}" />
		<property name="database" value="${persistence.database:HSQL}" />
		<property name="databasePlatform" value="${persistence.dialect:org.hibernate.dialect.HSQLDialect}" />
	</bean>
	
	<!-- 
		Informem el tipus de transaccionalitat dels diferents mètodes del dao.
		Aquesta transaccionalitat hauria d'estar definida a nivell de BO.
		No es necessari que s'informi aquesta transaccionalitat via XML, es pot
		marcar com a annotació.
		Exemple:
			
			
			@Transactional(readOnly = true)
			public class DefaultFooService implements FooService {
			
			    public Foo getFoo(String fooName) {
			        // do something
			    }
			
			    // these settings have precedence for this method
			    @Transactional(readOnly = false, propagation = Propagation.REQUIRES_NEW)
			    public void updateFoo(Foo foo) {
			        // do something
			    }
			}
	 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<tx:method name="get*"		propagation="REQUIRED" read-only="true" />
			<tx:method name="filter*"	propagation="REQUIRED" read-only="true" />
			<tx:method name="find*"		propagation="REQUIRED" read-only="true" />
			<tx:method name="load*"		propagation="SUPPORTS" read-only="true" />
			<tx:method name="save*"		propagation="REQUIRED" />
			<tx:method name="update*"	propagation="REQUIRED" />
			<tx:method name="delete*"	propagation="REQUIRED" />
			<tx:method name="insert*"	propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	
	
<!-- 	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
<!-- 	  <property name="jndiName" value="${jndi.name}"/> -->
<!-- 	  <property name="lookupOnStartup" value="${jndi.lookupOnStartup:true}"/> -->
<!-- 	  <property name="cache" value="${jndi.cache:true}"/> -->
<!-- 	  <property name="proxyInterface" value="javax.sql.DataSource"/> -->
<!-- 	</bean> -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driverClassName}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
	</bean>

</beans>