<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_ID" version="3.0"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<display-name>Canigo 3.0</display-name>
	<!-- Paràmetre de context que utilitza el org.springframework.web.context.ContextLoaderListener 
		per inicialitzar el context de Spring. -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:cat/gencat/ctti/canigo/arch/core/config/canigo-core.xml</param-value>
	</context-param>
	<!-- Paràmetre de context que indica la localització de la pàgina d'error 
		genèrica de l'aplicació -->
	<context-param>
		<param-name>errorPage</param-name>
		<param-value>/views/error.xhtml</param-value>
	</context-param>
	<!-- Indica que estem en un entorn de desenvolupament, i davant error en 
		la aplicació es mostrarà una pàgina detallada amb la informació del mateix, 
		així com l'arbre de components jsf que tenim en memòria -->
	<context-param>
		<param-name>facelets.DEVELOPMENT</param-name>
		<param-value>false</param-value>
	</context-param>
	<!-- Para que no compile comentarios -->
	<context-param>
		<param-name>javax.faces.FACELETS_SKIP_COMMENTS</param-name>
		<param-value>true</param-value>
	</context-param>
	<!-- JSF pages prefix -->
	<context-param>
		<param-name>javax.faces.DEFAULT_SUFFIX</param-name>
		<param-value>.xhtml</param-value>
	</context-param>
	<!-- Multiple faces-config files: * faces-config.xml: For configuration 
		purpose. This file should not be modified by the application. Use application-faces-config 
		file to declare managed beans and navigation-rules. * application-faces-config.xml -->
	<context-param>
		<param-name>javax.faces.application.CONFIG_FILES</param-name>
		<param-value>/WEB-INF/faces-config.xml</param-value>
	</context-param>
	<!-- Defines prefix which is added to all URIs of generated resources. This 
		prefix designed to handle RichFaces generated resources requests -->
	<context-param>
		<param-name>org.ajax4jsf.RESOURCE_URI_PREFIX</param-name>
		<param-value>AppJava/a4j/g/3_3_0.GA/</param-value>
	</context-param>
	<context-param>
		<param-name>org.richfaces.enableControlSkinning</param-name>
		<param-value>false</param-value>
	</context-param>
	<!-- Is a name of a skin used in an application. It can be a literal string 
		with a skin name, or the EL expression (#{...}) pointed to a String property 
		(skin name) or a property of a org.richfaces.framework.skin type. Skin in 
		last case, this instance is used as a current skin Skinning for standard 
		HTML controls can be initialized in two ways: * by adding org.richfaces.CONTROL_SKINNING 
		parameter to web.xml. Values: "enable" and "disable". This way implies that 
		skinning style properties are applied to elements by element name and attribute 
		type (where applicable). No additional steps required. Please find below 
		the table that contains the list of elements to which skinning is applicable. 
		* by adding org.richfaces.CONTROL_SKINNING_CLASSES parameter to web.xml file. 
		Possible values "enable" and "disable". When this option is enabled you are 
		provided with a set of predefined CSS classes that you can use for skinning 
		your HTML components. <context-param> <param-name>primefaces.THEME</param-name> 
		<param-value>none</param-value> </context-param> -->

	<context-param>
		<param-name>cat.gencat.ctti.canigo.arch.web.jsf.JSF_RESOURCE_PREFIX</param-name>
		<param-value>/AppJava</param-value>
	</context-param>
	<context-param>
		<param-name>cat.gencat.ctti.canigo.arch.web.jsf.JSF_RESOURCE_PREFIX_MAPPINGS</param-name>
		<param-value>rfRes;javax.faces.resource</param-value>
	</context-param>
 <!-- Filtre que s'encarrega de gestionar les peticions errònies -->
	<filter>
		<filter-name>ErrorHandler Filter</filter-name>
		<filter-class>cat.gencat.ctti.canigo.arch.web.jsf.filter.ErrorHandlerFilter</filter-class>
	</filter>
	<!-- Filtre que inicialitza les traces de l'aplicació. Es pot sobrecarregar 
		per afegir dades aplicatives al pattern de log4j -->
	<filter>
		<filter-name>Logging Filter</filter-name>
		<filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LoggingFilter</filter-class>
	</filter>
	<!-- Filtre que proporciona a l'aplicació el suport d'internacionalització 
		a l'aplicació -->
	<filter>
		<filter-name>Localization Filter</filter-name>
		<filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.LocalizationFilter</filter-class>
	</filter>
	<!-- UrlRewriteFilter -->

	<filter-mapping>
		<filter-name>ErrorHandler Filter</filter-name>
		<url-pattern>*.xhtml</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>Logging Filter</filter-name>
		<url-pattern>*.xhtml</url-pattern>
	</filter-mapping>
	<filter-mapping>
		<filter-name>Localization Filter</filter-name>
		<url-pattern>*.xhtml</url-pattern>
	</filter-mapping>

	<!-- Parse all relevant JavaServer Faces configuration resources, and configure 
		the Reference Implementation runtime environment. -->
	<listener>
		<listener-class>com.sun.faces.config.ConfigureListener</listener-class>
	</listener>
	<!-- If you don't specify the contextConfigLocation context parameter, the 
		ContextLoaderListener will look for a /WEB-INF/applicationContext.xml file 
		to load. Once the context files are loaded, Spring creates a WebApplicationContext 
		object based on the bean definitions and puts it into the ServletContext. -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Servlet 2.4+ listener that exposes the request to the current thread, 
		through both LocaleContextHolder and RequestContextHolder. To be registered 
		as listener in web.xml. Alternatively, Spring's RequestContextFilter and 
		Spring's DispatcherServlet also expose the same request context to the current 
		thread. This listener is mainly for use with third-party servlets, e.g. the 
		JSF FacesServlet. Within Spring's own web support, DispatcherServlet's processing 
		is perfectly sufficient. -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
	<!-- The Faces servlet, represented by the javax.faces.webapp.FacesServlet 
		class, is the engine of all JSF applications. Each JSF application in the 
		same web container has its own Faces servlet. -->
	<servlet>
		<servlet-name>Faces Servlet</servlet-name>
		<servlet-class>javax.faces.webapp.FacesServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>Faces Servlet</servlet-name>
		<url-pattern>*.xhtml</url-pattern>
	</servlet-mapping>

	<servlet>
		<servlet-name>dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>2</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>dispatcher</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>

	<!-- Session timeout: 30 minutes -->
	<session-config>
		<session-timeout>30</session-timeout>
	</session-config>
	<!-- Welcome page -->
	<welcome-file-list>
		<welcome-file>/views/index.xhtml</welcome-file>
	</welcome-file-list>
	<!-- Error page for HTTP Error 403 Forbidden -->
	<error-page>
		<error-code>403</error-code>
		<location>/views/error.xhtml</location>
	</error-page>
	<!-- Pàgina d'error genèrica -->
	<error-page>
		<exception-type>java.lang.Throwable</exception-type>
		<location>/views/error.xhtml</location>
	</error-page>
	<!-- Pàgina no trobada -->
	<error-page>
		<error-code>404</error-code>
		<location>/views/pagenotfound.xhtml</location>
	</error-page>
	<!-- Encoding -->
	<jsp-config>
		<jsp-property-group>
			<url-pattern>*.jsf</url-pattern>
			<page-encoding>ISO-8859-15</page-encoding>
		</jsp-property-group>
	</jsp-config>
	<filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>
		<filter-name>UrlRewriteFilter</filter-name>
		<filter-class>cat.gencat.ctti.canigo.arch.web.core.filters.urlrewrite.UrlRewriteFilter</filter-class>
		<init-param>
			<param-name>confPath</param-name>
			<param-value>classpath:urlrewrite/urlrewrite.xml</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>UrlRewriteFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
</web-app>